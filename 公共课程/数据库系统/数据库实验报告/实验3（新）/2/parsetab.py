
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftANDleftJOINleftSELECTPROJECTIONAVGAND AVG COMMA EQUALS IDENT JOIN LBRACKET LPAREN LT NUMBER PROJECTION RBRACKET RPAREN SELECT STRINGquery : operationoperation : SELECT LBRACKET condition RBRACKET LPAREN operation RPARENoperation : PROJECTION LBRACKET attributes RBRACKET LPAREN operation RPARENoperation : AVG LBRACKET IDENT RBRACKET LPAREN operation RPARENoperation : operation JOIN operationoperation : IDENTcondition : condition AND conditioncondition : IDENT EQUALS valuecondition : IDENT LT valuevalue : STRING\n             | NUMBERattributes : attributes COMMA IDENTattributes : IDENT'
    
_lr_action_items = {'SELECT':([0,7,24,30,32,],[3,3,3,3,3,]),'PROJECTION':([0,7,24,30,32,],[4,4,4,4,4,]),'AVG':([0,7,24,30,32,],[5,5,5,5,5,]),'IDENT':([0,7,8,9,10,18,22,24,30,32,],[6,6,13,15,16,13,31,6,6,6,]),'$end':([1,2,6,11,36,37,38,],[0,-1,-6,-5,-2,-3,-4,]),'JOIN':([2,6,11,33,34,35,36,37,38,],[7,-6,-5,7,7,7,-2,-3,-4,]),'LBRACKET':([3,4,5,],[8,9,10,]),'RPAREN':([6,11,33,34,35,36,37,38,],[-6,-5,36,37,38,-2,-3,-4,]),'RBRACKET':([12,14,15,16,25,26,27,28,29,31,],[17,21,-13,23,-7,-8,-10,-11,-9,-12,]),'AND':([12,25,26,27,28,29,],[18,-7,-8,-10,-11,-9,]),'EQUALS':([13,],[19,]),'LT':([13,],[20,]),'COMMA':([14,15,31,],[22,-13,-12,]),'LPAREN':([17,21,23,],[24,30,32,]),'STRING':([19,20,],[27,27,]),'NUMBER':([19,20,],[28,28,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'query':([0,],[1,]),'operation':([0,7,24,30,32,],[2,11,33,34,35,]),'condition':([8,18,],[12,25,]),'attributes':([9,],[14,]),'value':([19,20,],[26,29,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> query","S'",1,None,None,None),
  ('query -> operation','query',1,'p_query','sql_parser.py',82),
  ('operation -> SELECT LBRACKET condition RBRACKET LPAREN operation RPAREN','operation',7,'p_operation_select','sql_parser.py',86),
  ('operation -> PROJECTION LBRACKET attributes RBRACKET LPAREN operation RPAREN','operation',7,'p_operation_projection','sql_parser.py',91),
  ('operation -> AVG LBRACKET IDENT RBRACKET LPAREN operation RPAREN','operation',7,'p_operation_avg','sql_parser.py',96),
  ('operation -> operation JOIN operation','operation',3,'p_operation_join','sql_parser.py',101),
  ('operation -> IDENT','operation',1,'p_operation_table','sql_parser.py',108),
  ('condition -> condition AND condition','condition',3,'p_condition_and','sql_parser.py',113),
  ('condition -> IDENT EQUALS value','condition',3,'p_condition_equals','sql_parser.py',117),
  ('condition -> IDENT LT value','condition',3,'p_condition_lt','sql_parser.py',121),
  ('value -> STRING','value',1,'p_value','sql_parser.py',125),
  ('value -> NUMBER','value',1,'p_value','sql_parser.py',126),
  ('attributes -> attributes COMMA IDENT','attributes',3,'p_attributes_multiple','sql_parser.py',130),
  ('attributes -> IDENT','attributes',1,'p_attributes_single','sql_parser.py',134),
]
